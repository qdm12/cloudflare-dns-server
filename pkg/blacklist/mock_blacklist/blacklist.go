// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/pkg/blacklist (interfaces: BlackLister)

// Package mock_blacklist is a generated GoMock package.
package mock_blacklist

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dns "github.com/miekg/dns"
)

// MockBlackLister is a mock of BlackLister interface.
type MockBlackLister struct {
	ctrl     *gomock.Controller
	recorder *MockBlackListerMockRecorder
}

// MockBlackListerMockRecorder is the mock recorder for MockBlackLister.
type MockBlackListerMockRecorder struct {
	mock *MockBlackLister
}

// NewMockBlackLister creates a new mock instance.
func NewMockBlackLister(ctrl *gomock.Controller) *MockBlackLister {
	mock := &MockBlackLister{ctrl: ctrl}
	mock.recorder = &MockBlackListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlackLister) EXPECT() *MockBlackListerMockRecorder {
	return m.recorder
}

// FilterRequest mocks base method.
func (m *MockBlackLister) FilterRequest(arg0 *dns.Msg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FilterRequest indicates an expected call of FilterRequest.
func (mr *MockBlackListerMockRecorder) FilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRequest", reflect.TypeOf((*MockBlackLister)(nil).FilterRequest), arg0)
}

// FilterResponse mocks base method.
func (m *MockBlackLister) FilterResponse(arg0 *dns.Msg) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterResponse", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FilterResponse indicates an expected call of FilterResponse.
func (mr *MockBlackListerMockRecorder) FilterResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterResponse", reflect.TypeOf((*MockBlackLister)(nil).FilterResponse), arg0)
}
