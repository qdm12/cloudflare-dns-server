// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/dns/pkg/provider (interfaces: Provider)

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	provider "github.com/qdm12/dns/pkg/provider"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// DNS mocks base method.
func (m *MockProvider) DNS() provider.DNSServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNS")
	ret0, _ := ret[0].(provider.DNSServer)
	return ret0
}

// DNS indicates an expected call of DNS.
func (mr *MockProviderMockRecorder) DNS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNS", reflect.TypeOf((*MockProvider)(nil).DNS))
}

// DoH mocks base method.
func (m *MockProvider) DoH() provider.DoHServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoH")
	ret0, _ := ret[0].(provider.DoHServer)
	return ret0
}

// DoH indicates an expected call of DoH.
func (mr *MockProviderMockRecorder) DoH() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoH", reflect.TypeOf((*MockProvider)(nil).DoH))
}

// DoT mocks base method.
func (m *MockProvider) DoT() provider.DoTServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoT")
	ret0, _ := ret[0].(provider.DoTServer)
	return ret0
}

// DoT indicates an expected call of DoT.
func (mr *MockProviderMockRecorder) DoT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoT", reflect.TypeOf((*MockProvider)(nil).DoT))
}

// String mocks base method.
func (m *MockProvider) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockProviderMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockProvider)(nil).String))
}
